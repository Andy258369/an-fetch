name: Release Version

on:
  workflow_dispatch:
    inputs:
      version-type:
        description: '版本更新类型'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
      pre-release:
        description: '是否为预发布版本'
        required: false
        default: false
        type: boolean

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      id-token: write
    
    steps:
    - name: Checkout 代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        persist-credentials: true

    - name: 设置 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'

    - name: 配置 Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: 安装依赖
      run: npm ci

    - name: 运行测试
      run: npm test

    - name: 更新版本号
      id: version
      run: |
        if [ "${{ github.event.inputs.pre-release }}" == "true" ]; then
          NEW_VERSION=$(npm version pre${{ github.event.inputs.version-type }} --preid=beta --no-git-tag-version)
        else
          NEW_VERSION=$(npm version ${{ github.event.inputs.version-type }} --no-git-tag-version)
        fi
        echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "新版本: $NEW_VERSION"

    - name: 更新 CHANGELOG
      run: |
        VERSION=${{ steps.version.outputs.new-version }}
        DATE=$(date +%Y-%m-%d)
        
        # 创建新的 CHANGELOG 内容
        echo "# 更新日志" > new_changelog.md
        echo "" >> new_changelog.md
        echo "## [$VERSION] - $DATE" >> new_changelog.md
        echo "" >> new_changelog.md
        echo "### 新增" >> new_changelog.md
        echo "- 版本 $VERSION 发布" >> new_changelog.md
        echo "" >> new_changelog.md
        
        # 如果存在旧的 CHANGELOG，追加到新内容后面
        if [ -f CHANGELOG.md ]; then
          tail -n +3 CHANGELOG.md >> new_changelog.md
        fi
        
        mv new_changelog.md CHANGELOG.md

    - name: 构建项目
      run: npm run build

    - name: 提交版本更新
      run: |
        git add package.json package-lock.json CHANGELOG.md
        git commit -m "chore: release ${{ steps.version.outputs.new-version }}"
        git tag -a "${{ steps.version.outputs.new-version }}" -m "Release ${{ steps.version.outputs.new-version }}"

    - name: 推送更改
      run: |
        git push origin main
        git push origin "${{ steps.version.outputs.new-version }}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 发布到 npm
      run: |
        if [ "${{ github.event.inputs.pre-release }}" == "true" ]; then
          npm publish --tag beta
        else
          npm publish
        fi
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: 创建 GitHub Release
      run: |
        RELEASE_BODY="## 🚀 版本 ${{ steps.version.outputs.new-version }} 发布
        
        ### 📦 安装
        \`\`\`
        npm install an-fetch@${{ steps.version.outputs.new-version }}
        \`\`\`
        
        ### 🔗 相关链接
        - [npm 包](https://www.npmjs.com/package/an-fetch)
        - [完整文档](https://github.com/${{ github.repository }}/blob/main/README.md)
        - [TypeScript 使用指南](https://github.com/${{ github.repository }}/blob/main/TYPESCRIPT_USAGE.md)
        
        ### 📋 更新内容
        请查看 [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) 获取详细更新内容。"
        
        if [ "${{ github.event.inputs.pre-release }}" == "true" ]; then
          gh release create "${{ steps.version.outputs.new-version }}" \
            --title "Release ${{ steps.version.outputs.new-version }}" \
            --notes "$RELEASE_BODY" \
            --prerelease
        else
          gh release create "${{ steps.version.outputs.new-version }}" \
            --title "Release ${{ steps.version.outputs.new-version }}" \
            --notes "$RELEASE_BODY"
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}