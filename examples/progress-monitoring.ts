import { post, get, AxiosLikeRequestConfig, ProgressEvent } from '../src/index';

// 文件上传进度监控示例
async function uploadProgressDemo() {
  console.log('=== 文件上传进度监控示例 ===');

  // 模拟创建一个大文件
  const createLargeFile = (size: number): File => {
    const content = new Array(size).fill('0').join('');
    const blob = new Blob([content], { type: 'text/plain' });
    return new File([blob], 'large-file.txt', { type: 'text/plain' });
  };

  const largeFile = createLargeFile(1024 * 1024); // 1MB 文件

  // 上传进度回调
  const onUploadProgress = (progressEvent: ProgressEvent) => {
    console.log(`上传进度: ${progressEvent.percentage}% (${progressEvent.loaded}/${progressEvent.total} bytes)`);\n    \n    // 可以在这里更新 UI 进度条\n    updateProgressBar('upload', progressEvent.percentage);\n  };\n\n  const formData = new FormData();\n  formData.append('file', largeFile);\n  formData.append('description', '大文件上传测试');\n\n  try {\n    const config: AxiosLikeRequestConfig = {\n      baseURL: 'https://httpbin.org',\n      onUploadProgress,\n      headers: {\n        'X-Upload-Type': 'file',\n      },\n    };\n\n    console.log('开始上传文件...');\n    const response = await post('/post', formData, config);\n    console.log('文件上传完成:', response.status);\n    \n  } catch (error) {\n    console.error('文件上传失败:', error);\n  }\n}\n\n// 下载进度监控示例\nasync function downloadProgressDemo() {\n  console.log('\\n=== 文件下载进度监控示例 ===');\n\n  // 下载进度回调\n  const onDownloadProgress = (progressEvent: ProgressEvent) => {\n    console.log(`下载进度: ${progressEvent.percentage}% (${progressEvent.loaded}/${progressEvent.total} bytes)`);\n    \n    // 可以在这里更新 UI 进度条\n    updateProgressBar('download', progressEvent.percentage);\n  };\n\n  try {\n    const config: AxiosLikeRequestConfig = {\n      responseType: 'blob',\n      onDownloadProgress,\n      headers: {\n        'Accept': 'application/octet-stream',\n      },\n    };\n\n    console.log('开始下载文件...');\n    // 下载一个较大的文件\n    const response = await get('https://httpbin.org/bytes/1048576', config); // 1MB\n    \n    console.log('文件下载完成，大小:', (response.data as Blob).size, 'bytes');\n    \n  } catch (error) {\n    console.error('文件下载失败:', error);\n  }\n}\n\n// 批量文件操作进度监控\nasync function batchOperationProgress() {\n  console.log('\\n=== 批量操作进度监控 ===');\n\n  const files = [\n    'file1.txt',\n    'file2.txt', \n    'file3.txt',\n    'file4.txt',\n    'file5.txt',\n  ];\n\n  let completedFiles = 0;\n  const totalFiles = files.length;\n\n  console.log(`准备上传 ${totalFiles} 个文件...`);\n\n  const uploadPromises = files.map((fileName, index) => {\n    const fileContent = `这是文件 ${fileName} 的内容，文件索引: ${index}`;\n    const file = new File([fileContent], fileName, { type: 'text/plain' });\n    const formData = new FormData();\n    formData.append('file', file);\n\n    return post('https://httpbin.org/post', formData, {\n      onUploadProgress: (progressEvent: ProgressEvent) => {\n        // 单个文件的进度\n        const fileProgress = progressEvent.percentage;\n        \n        // 计算总体进度\n        const overallProgress = ((completedFiles / totalFiles) * 100) + (fileProgress / totalFiles);\n        \n        console.log(`文件 ${fileName}: ${fileProgress}% | 总进度: ${overallProgress.toFixed(1)}%`);\n      },\n    }).then(result => {\n      completedFiles++;\n      console.log(`✓ 文件 ${fileName} 上传完成`);\n      return result;\n    });\n  });\n\n  try {\n    await Promise.all(uploadPromises);\n    console.log('✓ 所有文件上传完成!');\n  } catch (error) {\n    console.error('批量上传失败:', error);\n  }\n}\n\n// 实时数据流进度监控\nasync function streamProgressDemo() {\n  console.log('\\n=== 数据流进度监控 ===');\n\n  try {\n    const response = await get('https://httpbin.org/stream/100', {\n      responseType: 'text',\n      onDownloadProgress: (progressEvent: ProgressEvent) => {\n        console.log(`流数据接收: ${progressEvent.loaded} bytes (${progressEvent.percentage}%)`);\n        \n        // 模拟实时数据处理\n        if (progressEvent.percentage > 0 && progressEvent.percentage % 25 === 0) {\n          console.log(`  --> 已处理 ${progressEvent.percentage}% 的数据`);\n        }\n      },\n    });\n\n    console.log('数据流接收完成');\n    \n  } catch (error) {\n    console.error('数据流接收失败:', error);\n  }\n}\n\n// 进度条更新函数（模拟 UI 更新）\nfunction updateProgressBar(type: 'upload' | 'download', percentage: number) {\n  const barLength = 20;\n  const filledLength = Math.round(barLength * percentage / 100);\n  const bar = '█'.repeat(filledLength) + '░'.repeat(barLength - filledLength);\n  \n  // 在实际应用中，这里会更新 DOM 元素\n  if (percentage % 10 === 0) { // 每 10% 显示一次，避免输出过多\n    console.log(`  [${type}] ${bar} ${percentage}%`);\n  }\n}\n\n// 高级进度监控：带有速度计算和预计剩余时间\nclass AdvancedProgressMonitor {\n  private startTime: number = 0;\n  private lastTime: number = 0;\n  private lastLoaded: number = 0;\n  private speeds: number[] = [];\n\n  startMonitoring() {\n    this.startTime = Date.now();\n    this.lastTime = this.startTime;\n    this.lastLoaded = 0;\n    this.speeds = [];\n  }\n\n  onProgress(progressEvent: ProgressEvent): void {\n    const currentTime = Date.now();\n    const timeDiff = currentTime - this.lastTime;\n    const loadedDiff = progressEvent.loaded - this.lastLoaded;\n\n    if (timeDiff > 100) { // 每 100ms 计算一次速度\n      const speed = loadedDiff / (timeDiff / 1000); // bytes per second\n      this.speeds.push(speed);\n      \n      // 保持最近 10 个速度值\n      if (this.speeds.length > 10) {\n        this.speeds.shift();\n      }\n\n      const avgSpeed = this.speeds.reduce((a, b) => a + b, 0) / this.speeds.length;\n      const remainingBytes = progressEvent.total - progressEvent.loaded;\n      const estimatedTime = remainingBytes / avgSpeed;\n\n      console.log(`进度: ${progressEvent.percentage}% | 速度: ${this.formatBytes(avgSpeed)}/s | 预计剩余: ${this.formatTime(estimatedTime)}`);\n\n      this.lastTime = currentTime;\n      this.lastLoaded = progressEvent.loaded;\n    }\n  }\n\n  private formatBytes(bytes: number): string {\n    const sizes = ['B', 'KB', 'MB', 'GB'];\n    if (bytes === 0) return '0 B';\n    const i = Math.floor(Math.log(bytes) / Math.log(1024));\n    return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];\n  }\n\n  private formatTime(seconds: number): string {\n    if (seconds < 60) return `${Math.round(seconds)}s`;\n    if (seconds < 3600) return `${Math.round(seconds / 60)}m`;\n    return `${Math.round(seconds / 3600)}h`;\n  }\n}\n\n// 使用高级进度监控器\nasync function advancedProgressDemo() {\n  console.log('\\n=== 高级进度监控示例 ===');\n\n  const monitor = new AdvancedProgressMonitor();\n  \n  try {\n    monitor.startMonitoring();\n    \n    const largeData = new Array(1024 * 1024).fill('x').join(''); // 1MB 数据\n    \n    await post('https://httpbin.org/post', { data: largeData }, {\n      onUploadProgress: (progressEvent: ProgressEvent) => {\n        monitor.onProgress(progressEvent);\n      },\n    });\n\n    console.log('高级进度监控演示完成');\n    \n  } catch (error) {\n    console.error('高级进度监控失败:', error);\n  }\n}\n\n// 导出所有示例函数\nexport {\n  uploadProgressDemo,\n  downloadProgressDemo,\n  batchOperationProgress,\n  streamProgressDemo,\n  advancedProgressDemo,\n  AdvancedProgressMonitor,\n};\n\n// 运行所有进度监控示例\nasync function runAllProgressExamples() {\n  await uploadProgressDemo();\n  await downloadProgressDemo();\n  await batchOperationProgress();\n  await streamProgressDemo();\n  await advancedProgressDemo();\n}\n\nexport default runAllProgressExamples;